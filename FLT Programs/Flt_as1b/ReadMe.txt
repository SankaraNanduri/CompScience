Programming assignment 1b
Name:  Srimalini Sankara Narayana Nanduri
Course: Formal Language Theory CS 5313
Due Date: 09/10/2024

README:

There are 4 separate programs and each program can be tested individually.

#NDFSMBuilder.java: 
javac NDFSMBuilder.java
java NDFSMBuilder <pattern.txt> <output.txt> -- In my case my pattern file name was: input1.txt and output file name was: ndfsm.txt


#NDFSMtoDFSM.java:
javac NDFSMtoDFSM.java
java NDFSMtoDFSM ndfsm.txt dfsm.txt -- In my case the input for this program was: ndfsm.txt and output file was: dfsm.txt and 


#FLTprog_1.java:
javac FLTprog_1.java
java FLTprog_1.java <input.txt> dfsm.txt


#MainProgram.java:
javac MainProgram.java
java MainProgram <pattern.txt> <input.txt>

Programs Included:
# NDFSMBuilder.java: Builds an NDFSM from a given pattern.
	*buildNDFSM(String inputFileName, String outputFileName): Reads a pattern from inputFileName and generates the corresponding 			NDFSM. It writes the NDFSM to outputFileName in a format with the alphabet, transition table, and final states. Handles 		cases where the file is empty or the pattern cannot be read.
	*main(String[] args):The entry point of the program, it calls buildNDFSM with the provided input and output file names. 			Automatically sets the output file as ndfsm.txt.

# NDFSMtoDFSM.java: Converts the NDFSM into a DFSM.
	*readNDFSMFile(String inputFileName, String[] alphabet, String[] finalStates):Reads the ndfsm.txt file, extracts the alphabet, 			transition table, and final states.Splits the input into manageable parts, removes unnecessary brackets ([]), and fills 		arrays 	with the respective values.
	*convertNDFSMToDFSM(String[][] ndfsmTransitions, String[] alphabet, String[] finalStates):Converts the NDFSM into a DFSM by 			processing each NDFSM state and generating a corresponding deterministic state.Creates new DFSM states as needed and 			tracks the final states.
	*getStateID(int[] stateSet, int size, int[][] stateQueue, int queueSize, int[] stateMapping, int nextStateID):Returns the unique 		DFSM state ID for a given NDFSM state set.If the state set doesnâ€™t exist, assigns a new state ID.
	*contains(int[] array, int size, int value):Checks if a value is present in an array of states.
	*main(String[] args):Reads the NDFSM file, converts it to a DFSM, and prints the resulting DFSM to dfsm.txt.

# FLTprog_1.java: Tests the generated DFSM against an input string.
	*parseDFSMFile(String fileName):Parses the DFSM specification from dfsm.txt, reading the alphabet, transition table, and final 			states.
	*simulateDFSM(DFSM dfsm, String inputString):Simulates the DFSM by reading each character of the input string and following the 		transition table.Determines whether the input string is accepted by the DFSM (i.e., if it reaches a final state).
	*readInputString(String fileName):Reads the input string from input.txt for testing the DFSM.
	*main(String[] args):Parses the DFSM file, reads the input string, and tests the DFSM using the simulateDFSM function.

#MainProgram.java: The main program that integrates all the above subprograms.
	*readPatternFromFile(String fileName):Reads the pattern from input1.txt for NDFSM building.
	*printFileContents(String fileName):Prints the contents of the specified file (ndfsm.txt or dfsm.txt) for debugging or display 			purposes.
	*readInputFromFile(String fileName):Reads the input string from input.txt to be used for DFSM testing.
	*main(String[] args):The main driver program that integrates all subprograms:
		Calls NDFSMBuilder to generate the NDFSM.
		Calls NDFSMtoDFSM to convert the NDFSM to DFSM.
		Calls FLTprog_1 to test the DFSM with the input string.

Files submitted:
MainProgram.java      # Main driver program
NDFSMBuilder.java     # Builds the NDFSM from a pattern
NDFSMtoDFSM.java      # Converts the NDFSM to DFSM
FLTprog_1.java        # Tests the DFSM with an input string
input1.txt            # Contains the pattern for NDFSMBuilder
input.txt             # Contains the input string for testing DFSM
ndfsm.txt             # Output file for NDFSM (generated by NDFSMBuilder)
dfsm.txt              # Output file for DFSM (generated by NDFSMtoDFSM)
